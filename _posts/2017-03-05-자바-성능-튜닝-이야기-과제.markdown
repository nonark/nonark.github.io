##### Map, Set, List, Queue 의 차이점을 서술하시오(Story4 - Page 59).

| 인터페이스 | 설명 |
| - | - |
| Map | 키와 값의 쌍으로 구성된 객체의 집합을 처리하기 위한 인터페이스, 키의 중복을 허용하지 않음 |
| Set | 중복을 허용하지 않는 집합을 처리하기 위한 인터페이스 |
| List | 순서가 있는 집합을 처리하기 위한 인터페이스, 중복을 허용 |
| Queue | 여러 개의 객체를 담아서 순서대로 처리하기 위한 인터페이스, List에 비해 첫 번째 요소를 제거하는 데 걸리는 시간이 짧음 |

##### reflection API 를 이용하여 매개변수로 넘어온 클래스의 종류 및 메소드 목록을 출력하는 메소드를 작성하시오(Story7 - Page 120).



##### XML 파서인 SAX 와 DOM 파서의 특징 및 장단점을 서술하시오(Story13 - Page 239).

| 이름 | 정의 | 장점 | 단점 |
| - | - | - | - |
| SAX(Simple API for XML) | 순차적 방식으로 XML을 처리 | 각 XML의 노드를 읽는 대로 처리하기 때문에 메모리의 부담이 부담이 DOM에 비해 적음 | 핸들러를 통해 순차적으로 이벤트를 처리하며, 이미 읽은 데이터의 구조를 수정하거나 삭제하기 어려움 |
| DOM(Document Object Model) | 모든 XML을 읽어서 트리를 만든 후 XML을 처리 | 모든 XML을 메모리에 올려서 작업하기 때문에 메모리에 부담 | 모든 XML의 내용을 읽은 이후에 처리하기 때문에 읽은 XML을 통하여 노드를 추가, 수정, 삭제하기 쉬운 구조로 구성 |

##### JMX 에 대하여 서술하시오(Story20 - Page 380).
Java Management eXtensions의 약자로 자바 기반의 애플리케이션을 모니터링하기 위해서 만든 기술로 4단계 레벨로 구성된다
* 인스트루먼테이션 레벨
* 에이전트 레벨
* 분산 서비스 레벨
* 추가 가능한 관리용 프로토콜 API들

##### JMX를 모니터링할 수 있는 도구를 3개 이상 나열하고 링크도 포함시키시오(Story20 - Page 385).
* Visual VM(jvisualvm) (http://visualvm.java.net/)
* Mission Controle (http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html)
* jconsole(http://docs.oracle.com/javase/6/docs/technotes/tools/share/jconsole.html)


##### Web access log 의 로그 포맷을 확인해 보고, 각 포맷에 대하여 서술하시오(Story22 - Page 405).

* %h : 서버에 요청을 한 클라이언트의 IP 주소
* %l : identd라는 사용자 인식 데몬이 클라이언트에서 동작하고 있을 경우에 보이는 정보
* %u : HTTP 인증을 통하여 확인된 문서를 요청한 사용자의 ID가 표시
* %t : 서버가 요청을 마친 시간
* \%r\ : 클라이언트에서 요청한 Request의 정보
* %>s : 서버에서 클라이언트로 보낸 최종 상태 코드
* %b : 클라이언트로 전송한 데이터의 크기

##### 자바 GC 종류를 모두 나열 하시오(Story17 - Page 330).
* Serial Collector
* Parallel Collector
* Parallel Compacting Collector
* Concurrent Mark-Sweep(CMS) Collector
* Garbage First Collector


##### GC 상황을 모니터링할 수 있는 도구를 3개 이상 나열하고, 링크도 포함시키시오(Story18 - Page 345).
* GC Analyzer (http://glezen.org/gca/)
* IBM GC 분석기 (http://www.alphaworks.ibm.com/tech/pmat)
* HPjtune (https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=HPJTUNE)


## JMH를 사용한 클래스 성능 비교

책에 나와있는 GenerateBenchMark를 사용할 수 없어서 일반 Benchmark Annotation을 사용하여 구현했으며
JMH를 사용한 List, Map 클래스의 성능 비교에 앞서 테스트 방식을 설명한다.

| 함수 | 설명 | 값 |
| - | - | - |
| warmupIterations | 실제 테스트에 앞서 반복테스트 하는 횟수, 특정 클래스는(Ex. Map) 초반 몇 회의 속도가 굉장히 느리기 때문에 이 함수를 이용해서 표준편차를 조정 | 15 |
| measurementIterations | 실제 테스트 횟수 | 15 |
| mode | 측정하고자 하는 데이터 | Mode.AverageTime(평균 시간) |
| timeUnit | 측정 단위 | TimeUnit.MICROSECONDS(마이크로초) |

그 외에 모든 테스트의 반복 횟수는 100,000으로 책에 비해 100배 많은 횟수로 진행하며 컴퓨터의 제원은 다음과 같다.

| 종류 | 설명 |
| - | - |
| CPU | Intel(R) Core(TM) i5-3570 CPU 3.40GHz |
| RAM | 8.00GB |
| OS | Windows 7 Enterprise K - 64bit |
| Tool | STS (Spring Tool Suite) 3.8.3 |


##### JMH 를 사용하여 Java SE 에 있는 List 를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교하시오.

* 추가과정 (Story4 - Page 72)

```
package test.collection.test;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class MyBenchmark 
{
    
    final static int LOOP_COUNT = 100000;
    List<Integer> arrayList;
    List<Integer> vector;
    List<Integer> linkedList;
        
    @Benchmark
    public void addArrayListTest(){
        arrayList = new ArrayList<Integer>();
        for(int loop=0; loop<LOOP_COUNT; loop++){
            arrayList.add(loop);
        }
    }
    
    @Benchmark
    public void addVectorTest(){
        vector = new Vector<Integer>();
        for(int loop=0; loop<LOOP_COUNT; loop++){
            vector.add(loop);
        }
    }
    
    @Benchmark
    public void addLinkedListTest(){
        linkedList = new LinkedList<Integer>();
        for(int loop=0; loop<LOOP_COUNT; loop++){
            linkedList.add(loop);
        }
    }
    
    public static void main(String[] args) throws RunnerException {
        Options opts = new OptionsBuilder()
                .include(".*" + MyBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(15)
                .measurementIterations(15)
                .mode(Mode.AverageTime)
                .timeUnit(TimeUnit.MICROSECONDS)
                .forks(1)
                .build();

            new Runner(opts).run();
    }
}

```

| 클래스명 | 평균(Micro Second) | 표준편차 (Micro Second) |
| - | - | - |
| ArrayList | 628.486 | 4.462 |
| Vector | 617.384 | 1.973 |
| LinkedList | 810.101 | 10.547 |

* 조회과정 (Story4 - Page 74)

```
package test.collection.test;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class MyBenchmark 
{
    
    final static int LOOP_COUNT = 100000;
    List<Integer> arrayList;
    List<Integer> vector;
    List<Integer> linkedList;
    
    int result = 0;
    
    @Setup
    public void setUp(){
        arrayList = new ArrayList<Integer>();
        linkedList = new LinkedList<Integer>();
        vector = new Vector<Integer>();
        
        for(int loop=0; loop<LOOP_COUNT; loop++){
            arrayList.add(loop);
            vector.add(loop);
            linkedList.add(loop);
        }
    }
        
    @Benchmark
    public void getArrayListTest(){
        
        for(int loop=0; loop<LOOP_COUNT; loop++){
            result = arrayList.get(loop);
        }
    }

    @Benchmark
    public void getVectorTest() {
        for (int loop = 0; loop < LOOP_COUNT; loop++) {
            result = vector.get(loop);
        }
    }
    
    @Benchmark
    public void getLinkedListTest(){
        for(int loop=0; loop<LOOP_COUNT; loop++){
            result = linkedList.get(loop);
        }
    }
    
    @Benchmark
    public void peekLinkedListTest(){
        LinkedList<Integer> linkedList2 = (LinkedList) linkedList; 
        for(int loop=0; loop<LOOP_COUNT; loop++){
            result = linkedList2.peek();
        }
    }
    
    public static void main(String[] args) throws RunnerException {
        Options opts = new OptionsBuilder()
                .include(".*" + MyBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(15)
                .measurementIterations(15)
                .mode(Mode.AverageTime)
                .timeUnit(TimeUnit.MICROSECONDS)
                .forks(1)
                .build();

            new Runner(opts).run();
    }
}

```

| 클래스명 | 평균(Micro Second) | 표준편차 (Micro Second) |
| - | - | - |
| ArrayList | 300.966 | 3.809 |
| Vector | 2111.317 | 11.371 |
| LinkedList | 6,775,379.943 | 51,204.977 |
| LinkedList(peek) | 1.692 | 0.008 |

* 삭제과정 (Story4 - Page 76)

```
package test.collection.test;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class MyBenchmark 
{
    
    final static int LOOP_COUNT = 100000;
    List<Integer> arrayList;
    List<Integer> vector;
    List<Integer> linkedList;
    
    @Setup
    public void setUp(){
        arrayList = new ArrayList<Integer>();
        linkedList = new LinkedList<Integer>();
        vector = new Vector<Integer>();
        
        for(int loop=0; loop<LOOP_COUNT; loop++){
            arrayList.add(loop);
            vector.add(loop);
            linkedList.add(loop);
        }
    }
        
    @Benchmark
    public void removeArrayListFromFirstTest(){
        ArrayList<Integer> tempList = new ArrayList<Integer>(arrayList);
        for(int loop=0; loop<LOOP_COUNT; loop++){
            tempList.remove(0);
        }
    }

    @Benchmark
    public void removeVectorFromFirstTest() {
        Vector<Integer> tempList = new Vector<Integer>(vector);
        for(int loop=0; loop<LOOP_COUNT; loop++){
            tempList.remove(0);
        }
    }
    
    @Benchmark
    public void removeLinkedListFromFirstTest(){
        LinkedList<Integer> tempList = new LinkedList<Integer>(linkedList);
        for(int loop=0; loop<LOOP_COUNT; loop++){
            tempList.remove(0);
        }
    }
    
    @Benchmark
    public void removeArrayListFromLastTest(){
        ArrayList<Integer> tempList = new ArrayList<Integer>(arrayList);
        for(int loop=LOOP_COUNT-1; loop>=0; loop--){
            tempList.remove(loop);
        }
    }

    @Benchmark
    public void removeVectorFromLastTest() {
        Vector<Integer> tempList = new Vector<Integer>(vector);
        for(int loop=LOOP_COUNT-1; loop>=0; loop--){
            tempList.remove(loop);
        }
    }
    
    @Benchmark
    public void removeLinkedListFromLastTest(){
        LinkedList<Integer> tempList = new LinkedList<Integer>(linkedList);
        for(int loop=0; loop<LOOP_COUNT; loop++){
            tempList.removeLast();
        }
    }
        
    public static void main(String[] args) throws RunnerException {
        Options opts = new OptionsBuilder()
                .include(".*" + MyBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(15)
                .measurementIterations(15)
                .mode(Mode.AverageTime)
                .timeUnit(TimeUnit.MICROSECONDS)
                .forks(1)
                .build();

            new Runner(opts).run();
    }
}

```

| 클래스명 | 평균(Micro Second) | 표준편차 (Micro Second) |
| - | - | - |
| ArrayListFirst | 1,001,494.064 | 7,348.887 |
| ArrayListLast | 154.132 | 1.565 |
| VectorFirst | 993,324.976| 5,094.796 |
| VectorLast | 140.495 | 1.490 |
| LinkedListFirst | 1,654.542 | 14.375 |
| LinkedListLast | 1,775.949 | 31.534 |


##### JMH 를 사용하여 Java SE 에 있는 Map을 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교하시오.

* 추가과정

```
package test.collection.test;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class MyBenchmark 
{
    
    final static int LOOP_COUNT = 100000;
    Map<Integer, String> hashMap;
    Map<Integer, String> hashtable;
    Map<Integer, String> treeMap;
    Map<Integer, String> linkedHashMap;
    int keys[];
    String data="abcdefghijklmnopqrstuvwxyz";
    
    @Setup
    public void setUp(){
        if(keys==null || keys.length!=LOOP_COUNT){
            
            keys = new int[LOOP_COUNT];
            
            for(int loop = 0; loop<LOOP_COUNT;loop++){
                keys[loop] = loop;
            }
            
            for(int loop = 0; loop<LOOP_COUNT;loop++){
                int idx = (int) (Math.random() * LOOP_COUNT);
                int temp = keys[loop];
                keys[loop] = keys[idx];
                keys[idx] = temp;
            }
        }
    }
        
    @Benchmark
    public void addSeqHashMapTest(){
        hashMap = new HashMap<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashMap.put(loop, data + loop);
        }
    }
    
    @Benchmark
    public void addRandomHashMapTest(){
        hashMap = new HashMap<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashMap.put(keys[loop], data + loop);
        }
    }
    
    @Benchmark
    public void addSeqHashtableTest(){
        hashtable = new Hashtable<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashtable.put(loop, data + loop);
        }
    }
    
    @Benchmark
    public void addRandomHashtableTest(){
        hashtable = new Hashtable<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashtable.put(keys[loop], data + loop);
        }
    }
    
    @Benchmark
    public void addSeqTreeMapTest(){
        treeMap = new TreeMap<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            treeMap.put(loop, data + loop);
        }
    }
    
    @Benchmark
    public void addRandomTreeMapTest(){
        treeMap = new TreeMap<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            treeMap.put(keys[loop], data + loop);
        }
    }
    
    @Benchmark
    public void addSeqLinkedHashMapTest(){
        linkedHashMap = new LinkedHashMap<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            linkedHashMap.put(loop, data + loop);
        }
    }
    
    @Benchmark
    public void addRandomLinkedHashMapTest(){
        linkedHashMap = new LinkedHashMap<Integer, String>();
        for(int loop=0;loop<LOOP_COUNT;loop++){
            linkedHashMap.put(keys[loop], data + loop);
        }
    }

        
    public static void main(String[] args) throws RunnerException {
        Options opts = new OptionsBuilder()
                .include(".*" + MyBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(15)
                .measurementIterations(15)
                .mode(Mode.AverageTime)
                .timeUnit(TimeUnit.MICROSECONDS)
                .forks(1)
                .build();

            new Runner(opts).run();
    }
}

```

| 클래스명 | 평균(Micro Second) | 표준편차 (Micro Second) |
| - | - | - |
| HashMap(Sequence) | 6,081.784 | 24.815 |
| HashMap(Random) | 15,413.467 | 153.754 |
| Hashtable(Sequence) | 5,828.999 | 34.329 |
| Hashtable(Random)  | 11,876.583 | 224.845 |
| TreeMap(Sequence) | 15,291.730 | 110.109 |
| TreeMap(Random)  | 34,414.230 | 825.996 |
| LinkedHashMap(Sequence) | 6,760.800 | 87.488 |
| LinkedHashMap(Random) | 16,560.597 | 204.104 |

* 조회과정 (Story4 - Page 81)

```
package test.collection.test;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class MyBenchmark 
{
    
    final static int LOOP_COUNT = 100000;
    Map<Integer, String> hashMap;
    Map<Integer, String> hashtable;
    Map<Integer, String> treeMap;
    Map<Integer, String> linkedHashMap;
    int keys[];
    String data="abcdefghijklmnopqrstuvwxyz";
    
    @Setup
    public void setUp(){
        if(keys==null || keys.length!=LOOP_COUNT){
            
            hashMap = new HashMap<Integer, String>();
            hashtable = new Hashtable<Integer, String>();
            treeMap = new TreeMap<Integer, String>();
            linkedHashMap = new LinkedHashMap<Integer, String>();
            keys = new int[LOOP_COUNT];
            
            for(int loop = 0; loop<LOOP_COUNT;loop++){
                keys[loop] = loop;
                String tempData = data + loop;
                hashMap.put(loop, tempData);
                hashtable.put(loop, tempData);
                treeMap.put(loop, tempData);
                linkedHashMap.put(loop, tempData);
            }
            
            for(int loop = 0; loop<LOOP_COUNT;loop++){
                int idx = (int) (Math.random() * LOOP_COUNT);
                int temp = keys[loop];
                keys[loop] = keys[idx];
                keys[idx] = temp;
            }
        }
    }
        
    @Benchmark
    public void getSeqHashMapTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashMap.get(loop);
        }
    }
    
    @Benchmark
    public void getRandomHashMapTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashMap.get(keys[loop]);
        }
    }
    
    @Benchmark
    public void getSeqHashtableTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashtable.get(loop);
        }
    }
    
    @Benchmark
    public void getRandomHashtableTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            hashtable.get(keys[loop]);
        }
    }
    
    @Benchmark
    public void getSeqTreeMapTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            treeMap.get(loop);
        }
    }
    
    @Benchmark
    public void getRandomTreeMapTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            treeMap.get(keys[loop]);
        }
    }
    
    @Benchmark
    public void getSeqLinkedHashMapTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            linkedHashMap.get(loop);
        }
    }
    
    @Benchmark
    public void getRandomLinkedHashMapTest(){
        for(int loop=0;loop<LOOP_COUNT;loop++){
            linkedHashMap.get(keys[loop]);
        }
    }

        
    public static void main(String[] args) throws RunnerException {
        Options opts = new OptionsBuilder()
                .include(".*" + MyBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(15)
                .measurementIterations(15)
                .mode(Mode.AverageTime)
                .timeUnit(TimeUnit.MICROSECONDS)
                .forks(1)
                .build();

            new Runner(opts).run();
    }
}

```

| 클래스명 | 평균(Micro Second) | 표준편차 (Micro Second) |
| - | - | - |
| HashMap(Sequence) | 1,144.795 | 22.199 |
| HashMap(Random) | 2,310.364 | 54.238 |
| Hashtable(Sequence) | 2,511.013 | 21.352 |
| Hashtable(Random)  | 4,103.260 | 58.532 |
| TreeMap(Sequence) | 7,039.370 | 111.010 |
| TreeMap(Random)  | 22,941.918 | 271.851 |
| LinkedHashMap(Sequence) | 1,176.555 | 18.878 |
| LinkedHashMap(Random) | 2,597.301 | 58.532 |


* 삭제과정

```
package test.collection.test;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

@State(Scope.Thread)
@BenchmarkMode({Mode.AverageTime})
@OutputTimeUnit(TimeUnit.MICROSECONDS)
public class MyBenchmark 
{
    
    final static int LOOP_COUNT = 100000;
    Map<Integer, String> hashMap;
    Map<Integer, String> hashtable;
    Map<Integer, String> treeMap;
    Map<Integer, String> linkedHashMap;
    int keys[];
    String data="abcdefghijklmnopqrstuvwxyz";
    
    @Setup
    public void setUp(){
        if(keys==null || keys.length!=LOOP_COUNT){
            
            hashMap = new HashMap<Integer, String>();
            hashtable = new Hashtable<Integer, String>();
            treeMap = new TreeMap<Integer, String>();
            linkedHashMap = new LinkedHashMap<Integer, String>();
            keys = new int[LOOP_COUNT];
            
            for(int loop = 0; loop<LOOP_COUNT;loop++){
                keys[loop] = loop;
                String tempData = data + loop;
                hashMap.put(loop, tempData);
                hashtable.put(loop, tempData);
                treeMap.put(loop, tempData);
                linkedHashMap.put(loop, tempData);
            }
            
            for(int loop = 0; loop<LOOP_COUNT;loop++){
                int idx = (int) (Math.random() * LOOP_COUNT);
                int temp = keys[loop];
                keys[loop] = keys[idx];
                keys[idx] = temp;
            }
        }
    }
        
    @Benchmark
    public void removeSeqHashMapTest(){
        Map<Integer, String> tempMap = new HashMap<Integer, String>(hashMap);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeRandomHashMapTest(){
        Map<Integer, String> tempMap = new HashMap<Integer, String>(hashMap);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(keys[loop]);
        }
    }
    
    @Benchmark
    public void removeLastHashMapTest(){
        Map<Integer, String> tempMap = new HashMap<Integer, String>(hashMap);
        for(int loop=LOOP_COUNT-1;loop>=0;loop--){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeSeqHashtableTest(){
        Map<Integer, String> tempMap = new Hashtable<Integer, String>(hashtable);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeRandomHashtableTest(){
        Map<Integer, String> tempMap = new Hashtable<Integer, String>(hashtable);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(keys[loop]);
        }
    }
    
    @Benchmark
    public void removeLastHashtableTest(){
        Map<Integer, String> tempMap = new Hashtable<Integer, String>(hashtable);
        for(int loop=LOOP_COUNT-1;loop>=0;loop--){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeSeqTreeMapTest(){
        Map<Integer, String> tempMap = new TreeMap<Integer, String>(treeMap);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeRandomTreeMapTest(){
        Map<Integer, String> tempMap = new TreeMap<Integer, String>(treeMap);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(keys[loop]);
        }
    }

    @Benchmark
    public void removeLastTreeMapTest(){
        Map<Integer, String> tempMap = new TreeMap<Integer, String>(treeMap);
        for(int loop=LOOP_COUNT-1;loop>=0;loop--){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeSeqLinkedHashMapTest(){
        Map<Integer, String> tempMap = new LinkedHashMap<Integer, String>(linkedHashMap);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(loop);
        }
    }
    
    @Benchmark
    public void removeRandomLinkedHashMapTest(){
        Map<Integer, String> tempMap = new LinkedHashMap<Integer, String>(linkedHashMap);
        for(int loop=0;loop<LOOP_COUNT;loop++){
            tempMap.remove(keys[loop]);
        }
    }
    
    @Benchmark
    public void removeLastLinkedHashMapTest(){
        Map<Integer, String> tempMap = new LinkedHashMap<Integer, String>(linkedHashMap);
        for(int loop=LOOP_COUNT-1;loop>=0;loop--){
            tempMap.remove(loop);
        }
    }

        
    public static void main(String[] args) throws RunnerException {
        Options opts = new OptionsBuilder()
                .include(".*" + MyBenchmark.class.getSimpleName() + ".*")
                .warmupIterations(15)
                .measurementIterations(15)
                .mode(Mode.AverageTime)
                .timeUnit(TimeUnit.MICROSECONDS)
                .forks(1)
                .build();

            new Runner(opts).run();
    }
}

```

| 클래스명 | 평균(Micro Second) | 표준편차 (Micro Second) |
| - | - | - |
| HashMap(Sequence) | 4,956.036 | 67.145 |
| HashMap(Random) | 8,605.648 | 89.219 |
| HashMap(Reverse - Sequence) | 4,730.722 | 31.614 |
| Hashtable(Sequence) | 4,011.443 | 62.827 |
| Hashtable(Random)  | 8,368.665 | 169.412 |
| Hashtable(Reverse - Sequence) | 3,848.697 | 132.252 |
| TreeMap(Sequence) | 9,916.245 | 292.571 |
| TreeMap(Random)  | 39,829.313 | 734.441 |
| TreeMap(Reverse - Sequence) | 10,120.999 | 456.811 |
| LinkedHashMap(Sequence) | 6,312.668 | 77.565
| LinkedHashMap(Random) | 14,625.547 | 231.009 |
| LinkedHashMap(Reverse - Sequence) | 5,478.124 | 83.838 |
